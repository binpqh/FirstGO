// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	Class            *class
	DetailTranscript *detailTranscript
	Student          *student
	Subject          *subject
	Sysdiagram       *sysdiagram
	Teacher          *teacher
	TimeTable        *timeTable
	Transcript       *transcript
	User             *user
	Weekday          *weekday
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Class = &Q.Class
	DetailTranscript = &Q.DetailTranscript
	Student = &Q.Student
	Subject = &Q.Subject
	Sysdiagram = &Q.Sysdiagram
	Teacher = &Q.Teacher
	TimeTable = &Q.TimeTable
	Transcript = &Q.Transcript
	User = &Q.User
	Weekday = &Q.Weekday
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Class:            newClass(db, opts...),
		DetailTranscript: newDetailTranscript(db, opts...),
		Student:          newStudent(db, opts...),
		Subject:          newSubject(db, opts...),
		Sysdiagram:       newSysdiagram(db, opts...),
		Teacher:          newTeacher(db, opts...),
		TimeTable:        newTimeTable(db, opts...),
		Transcript:       newTranscript(db, opts...),
		User:             newUser(db, opts...),
		Weekday:          newWeekday(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Class            class
	DetailTranscript detailTranscript
	Student          student
	Subject          subject
	Sysdiagram       sysdiagram
	Teacher          teacher
	TimeTable        timeTable
	Transcript       transcript
	User             user
	Weekday          weekday
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Class:            q.Class.clone(db),
		DetailTranscript: q.DetailTranscript.clone(db),
		Student:          q.Student.clone(db),
		Subject:          q.Subject.clone(db),
		Sysdiagram:       q.Sysdiagram.clone(db),
		Teacher:          q.Teacher.clone(db),
		TimeTable:        q.TimeTable.clone(db),
		Transcript:       q.Transcript.clone(db),
		User:             q.User.clone(db),
		Weekday:          q.Weekday.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Class:            q.Class.replaceDB(db),
		DetailTranscript: q.DetailTranscript.replaceDB(db),
		Student:          q.Student.replaceDB(db),
		Subject:          q.Subject.replaceDB(db),
		Sysdiagram:       q.Sysdiagram.replaceDB(db),
		Teacher:          q.Teacher.replaceDB(db),
		TimeTable:        q.TimeTable.replaceDB(db),
		Transcript:       q.Transcript.replaceDB(db),
		User:             q.User.replaceDB(db),
		Weekday:          q.Weekday.replaceDB(db),
	}
}

type queryCtx struct {
	Class            IClassDo
	DetailTranscript IDetailTranscriptDo
	Student          IStudentDo
	Subject          ISubjectDo
	Sysdiagram       ISysdiagramDo
	Teacher          ITeacherDo
	TimeTable        ITimeTableDo
	Transcript       ITranscriptDo
	User             IUserDo
	Weekday          IWeekdayDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Class:            q.Class.WithContext(ctx),
		DetailTranscript: q.DetailTranscript.WithContext(ctx),
		Student:          q.Student.WithContext(ctx),
		Subject:          q.Subject.WithContext(ctx),
		Sysdiagram:       q.Sysdiagram.WithContext(ctx),
		Teacher:          q.Teacher.WithContext(ctx),
		TimeTable:        q.TimeTable.WithContext(ctx),
		Transcript:       q.Transcript.WithContext(ctx),
		User:             q.User.WithContext(ctx),
		Weekday:          q.Weekday.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
